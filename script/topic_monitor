#! /usr/bin/env python

import rospy
import rostopic
import rosgraph
import os
import sys
import fnmatch

from std_msgs.msg import String

master = rosgraph.Master('/rostopic')

rospy.init_node("topic_monitor")

def check_kinect(topic):
    if topic._topic_name == "/sergio/top_kinect/rgbd":
        rospy.logwarn("Killing kinect driver")
        os.system("rosnode kill /sergio/top_kinect/driver")
        rospy.sleep(1.0)

matches = None
if sys.argv > 1:
    matches = sys.argv[1:]
    rospy.loginfo("Checking for topics with fnmatches %s", matches)

def get_topic_names():
    names = []

    state = master.getSystemState()
    pubs, subs, _ = state

    for pub in pubs:
        topic_name  = pub[0]
        if matches is not None:
            for match in matches:
                if fnmatch.fnmatch(topic_name, match):
                    names.append(topic_name)
        else:
            names.append(topic_name)

    return names

class Topic:
    def __init__(self, topic_name):
        self._topic_name = topic_name
        self._count = 0

    def callback(self, data):
        self._count += 1

    def reset(self):
        self._count = 0

topics = []
topic_names = []
def update_topics():
    names = get_topic_names()
    for name in names:
        if name not in topic_names:
            topic_names.append(name)
            topic_class = rostopic.get_topic_class(name)[0]
            print "Subscribing to %s --- type: %s"%(name, topic_class)
            topic = Topic(name)
            rospy.Subscriber(name, topic_class, topic.callback)
            topics.append(topic)

update_topics()

if not topic_names:
    rospy.logwarn("No topics found for mathes %s", matches)
    sys.exit()

rospy.sleep(1.0)

total_time = 5
print "\nListening to all topics for %d seconds ..."%total_time

while not rospy.is_shutdown():

    for topic in topics:
        topic.reset()

    start_time = rospy.Time.now()

    while not rospy.is_shutdown() and rospy.Time.now() - start_time < rospy.Duration(total_time):
        rospy.sleep(0.1)

    os.system('clear')
    print "--------------------------------------\n| TOTAL MESSAGES RECEIVED PER TOPIC: |\n--------------------------------------"

    # Sort topics by number of messages
    topics = sorted(topics, key=lambda x: x._count, reverse=True)

    for topic in topics:
        string = "%3d Hz\t%s"%(topic._count / total_time, topic._topic_name)
        if topic._count == 0:
            rospy.logerr(string)
            check_kinect(topic)
        else:
            rospy.loginfo(string)

    update_topics()
